// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/01/2024 10:47:12"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          alarm_clock
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module alarm_clock_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] hr0;
reg [1:0] hr1;
reg [3:0] min0;
reg [2:0] min1;
reg rst;
// wires                                               
wire [3:0] cnt0;
wire [3:0] cnt1;
wire [3:0] cnt2;
wire [3:0] cnt3;
wire led_on;

// assign statements (if any)                          
alarm_clock i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.cnt0(cnt0),
	.cnt1(cnt1),
	.cnt2(cnt2),
	.cnt3(cnt3),
	.hr0(hr0),
	.hr1(hr1),
	.led_on(led_on),
	.min0(min0),
	.min1(min1),
	.rst(rst)
);
initial 
begin 
#15000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #10000 1'b0;
end 
// hr1[ 1 ]
initial
begin
	hr1[1] = 1'b0;
end 
// hr1[ 0 ]
initial
begin
	hr1[0] = 1'b0;
end 
// hr0[ 3 ]
initial
begin
	hr0[3] = 1'b0;
end 
// hr0[ 2 ]
initial
begin
	hr0[2] = 1'b0;
end 
// hr0[ 1 ]
initial
begin
	hr0[1] = 1'b0;
end 
// hr0[ 0 ]
initial
begin
	hr0[0] = 1'b0;
end 
// min1[ 2 ]
initial
begin
	min1[2] = 1'b0;
end 
// min1[ 1 ]
initial
begin
	min1[1] = 1'b0;
end 
// min1[ 0 ]
initial
begin
	min1[0] = 1'b0;
end 
// min0[ 3 ]
initial
begin
	min0[3] = 1'b0;
end 
// min0[ 2 ]
initial
begin
	min0[2] = 1'b0;
end 
// min0[ 1 ]
initial
begin
	min0[1] = 1'b0;
end 
// min0[ 0 ]
initial
begin
	min0[0] = 1'b0;
end 
endmodule

