// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.0 Build 711 06/05/2020 SJ Lite Edition"

// DATE "03/06/2024 10:46:25"

// 
// Device: Altera 10M50DAF484C7G Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module full_adder (
	sum,
	cin,
	a,
	b,
	cout);
output 	sum;
input 	cin;
input 	a;
input 	b;
output 	cout;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \sum~output_o ;
wire \cout~output_o ;
wire \cin~input_o ;
wire \a~input_o ;
wire \b~input_o ;
wire \inst1|inst~0_combout ;
wire \inst2~0_combout ;


fiftyfivenm_io_obuf \sum~output (
	.i(\inst1|inst~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\sum~output_o ),
	.obar());
// synopsys translate_off
defparam \sum~output .bus_hold = "false";
defparam \sum~output .open_drain_output = "false";
// synopsys translate_on

fiftyfivenm_io_obuf \cout~output (
	.i(\inst2~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\cout~output_o ),
	.obar());
// synopsys translate_off
defparam \cout~output .bus_hold = "false";
defparam \cout~output .open_drain_output = "false";
// synopsys translate_on

fiftyfivenm_io_ibuf \cin~input (
	.i(cin),
	.ibar(gnd),
	.nsleep(vcc),
	.o(\cin~input_o ));
// synopsys translate_off
defparam \cin~input .bus_hold = "false";
defparam \cin~input .listen_to_nsleep_signal = "false";
defparam \cin~input .simulate_z_as = "z";
// synopsys translate_on

fiftyfivenm_io_ibuf \a~input (
	.i(a),
	.ibar(gnd),
	.nsleep(vcc),
	.o(\a~input_o ));
// synopsys translate_off
defparam \a~input .bus_hold = "false";
defparam \a~input .listen_to_nsleep_signal = "false";
defparam \a~input .simulate_z_as = "z";
// synopsys translate_on

fiftyfivenm_io_ibuf \b~input (
	.i(b),
	.ibar(gnd),
	.nsleep(vcc),
	.o(\b~input_o ));
// synopsys translate_off
defparam \b~input .bus_hold = "false";
defparam \b~input .listen_to_nsleep_signal = "false";
defparam \b~input .simulate_z_as = "z";
// synopsys translate_on

fiftyfivenm_lcell_comb \inst1|inst~0 (
// Equation(s):
// \inst1|inst~0_combout  = \cin~input_o  $ (\a~input_o  $ (\b~input_o ))

	.dataa(\cin~input_o ),
	.datab(\a~input_o ),
	.datac(\b~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst1|inst~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst1|inst~0 .lut_mask = 16'h9696;
defparam \inst1|inst~0 .sum_lutc_input = "datac";
// synopsys translate_on

fiftyfivenm_lcell_comb \inst2~0 (
// Equation(s):
// \inst2~0_combout  = (\cin~input_o  & ((\a~input_o ) # (\b~input_o ))) # (!\cin~input_o  & (\a~input_o  & \b~input_o ))

	.dataa(\cin~input_o ),
	.datab(\a~input_o ),
	.datac(\b~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst2~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst2~0 .lut_mask = 16'hE8E8;
defparam \inst2~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign sum = \sum~output_o ;

assign cout = \cout~output_o ;

endmodule
